1. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Create a table maually.
   
ANS. student.java

package Package1;

public class student {

	private int rollno;
	private String name;
	private int age; 
	private int id;
	
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	
}
==========================================================================

student_test.java

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class student_test {

	public static void main(String[] args) {
		
     SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
	 Session s=sf.openSession();
		
	 Transaction t=s.beginTransaction();
		
	 student s1=new student();
	 
	 s1.setName("VISHAL");
	 
	 s1.setAge(19);
	 
	 s1.setRollno(21);
	 
     student s2=new student();
	 
	 s2.setName("SOHAM");
	 
	 s2.setAge(12);
	 
	 s2.setRollno(22);
	 
	 s.save(s1);
	 
	 s.save(s2);
	 
	 t.commit();
	 
	 s.close();
	 
	 sf.close();
	 
	System.out.println("DONE");
	
	}
		
}
======================================================================================

hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="student.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
=============================================================================================================

student.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 18 Feb, 2021 10:50:01 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.student" table="studentdetails">
        <id name="id" type="int">
            <column name="id" />
            <generator class="increment" />
        </id>
        <property name="rollno" type="int">
            <column name="rollno" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="name" />
        </property>
        <property name="age" type="int">
            <column name="age" />
        </property>
    </class>
</hibernate-mapping>
======================================================================================================================================================================

2. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Table should be created by hibernate and the records in the table should be updated.
   
ANS. student.java

package Package1;

public class student {

	private int rollno;
	private String name;
	private int age; 
	private int id;
	
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	
}
========================================================

studet_test.java

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class student_test {

	public static void main(String[] args) {
		
     SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
	 Session s=sf.openSession();
		
	 Transaction t=s.beginTransaction();
		
	 student s1=new student();
	 
	 s1.setName("VISHAL");
	 
	 s1.setAge(19);
	 
	 s1.setRollno(21);
	 
     student s2=new student();
	 
	 s2.setName("SOHAM");
	 
	 s2.setAge(12);
	 
	 s2.setRollno(22);
	 
	  student s3=new student();
		 
	  s3.setName("OM");
		 
	  s3.setAge(15);
		 
	  s3.setRollno(23);
	 
	 s.save(s1);
	 
	 s.save(s2);
	 
	 s.save(s3);
	 
	 t.commit();
	 
	 s.close();
	 
	 sf.close();
	 
	System.out.println("DONE");
	
	}
		
}
==============================================================================

student.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 18 Feb, 2021 11:16:04 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.student" table="ASSI2HB">
        <id name="id" type="int">
            <column name="ID" />
            <generator class="increment" />
        </id>
        <property name="rollno" type="int">
            <column name="ROLLNO" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="NAME" />
        </property>
        <property name="age" type="int">
            <column name="AGE" />
        </property>
    </class>
</hibernate-mapping>
=======================================================================================

hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
      <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping  resource="student.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
=======================================================================================================================================================================

3. Make a class Account which has fields like accno,name & acctype. Acoount class will be Entity class. Take data from user and the table will be created automatically.

ANS. account.java

package Package1;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "accQ3")

public class account {
	
	 @Id
	 @GeneratedValue(strategy = GenerationType.SEQUENCE)
	 @Column(name = "Account_No")
	 private int accountno;
	
	 @Column(name = "Account_Name")
	 private String accountname;
	 
	 @Column(name = "Account_Type")
	 private String accounttype;

	public String getAccountname() {
		return accountname;
	}

	public void setAccountname(String accountname) {
		this.accountname = accountname;
	}

	public String getAccounttype() {
		return accounttype;
	}

	public void setAccounttype(String accounttype) {
		this.accounttype = accounttype;
	}

	public int getAccountno() {
		return accountno;
	}

	public void setAccountno(int accountno) {
		this.accountno = accountno;
	}
	
	
}
=====================================================================

account_test.java

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class account_test {

	public static void main(String[] args) {
		
		SessionFactory sf=new Configuration().configure().addAnnotatedClass(account.class).buildSessionFactory();

		Session s=sf.openSession();
		
		s.beginTransaction();
		
		account a1=new account();
		
		a1.setAccountname("Ajay");
		
		a1.setAccounttype("Current");
		
		a1.setAccountno(454567);
		
		s.save(a1);
		
		//s.getTransaction().commit();
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
	
		System.out.println("COMPLETED");
		
	}

}
=======================================================================================

hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
    </session-factory>
</hibernate-configuration>
=======================================================================================================================================================================

4. Create a hibernate project in Maven which is a Dynamic web Project and Create a mapping file for the POJO class.Two JSP pages(A,B) will be created.First Jsp will 
   accepts username,Password and stores the deails in the logintable. In the same project Create another servlet which updates the password in the table. Create a 
   seperate JSP to update the password.Once the record is saved in table then second JSP page will display the message as "Record submitted".
   
ANS. Pojo.java

     package Package1;

public class Pojo 

{

	public int sno;
	
	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public String username;
	
	public String password;

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Pojo(String username, String password) {
		super();
		this.username = username;
		this.password = password;
	}

	public Pojo() {
		super();
	}
}	
=================================================================================

      Servlet1.java
      
      package Package1;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 * Servlet implementation class Servlet1
 */
public class Servlet1 extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Servlet1() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
		PrintWriter out = response.getWriter();
		
		String US = request.getParameter("US");
		
		String PW = request.getParameter("PW");
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Pojo p=new Pojo();
		
		p.setUsername(US);
		
		p.setPassword(PW);
		
		s.save(p);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
==========================================================================================================================================

        Servlet2.java
	
	package Package1;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 * Servlet implementation class Servlet2
 */
public class Servlet2 extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Servlet2() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
		PrintWriter out = response.getWriter();
		
		int sno = Integer.parseInt(request.getParameter("ID"));
		
		String PW = request.getParameter("PW");
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Pojo p = s.get(Pojo.class,sno);
		
		p.setPassword(PW);
		
		s.update(p);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		System.out.println("PASSWORD SUCCESSFULLY UPDATED");
		
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
=====================================================================================================================================

     A.jsp
     
     <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="Servlet1">
USERNAME <input type="text" name="US"><br>
<br>
PASSWORD <input type="password" name="PW"><br>
<br>
<input type="submit" value="SUBMIT" >
</form>
</body>
</html>
=====================================================================================

   B.jsp
   
   <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="Servlet2">
ID <input type="text" name="ID"><br>
<br>
PASSWORD <input type="password" name="PW"><br>
<br>
<input type="submit" value="SUBMIT">
</form>
</body>
</html>
============================================================================================

  hibernate.cfg.xml
  
  <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="Pojo.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
===========================================================================================================

   Pojo.hbm.xml
   
   <?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 26 Feb, 2021 10:09:22 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.Pojo" table="POJO">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="assigned" />
        </id>
        <property name="username" type="java.lang.String">
            <column name="USERNAME" />
        </property>
        <property name="password" type="java.lang.String">
            <column name="PASSWORD" />
        </property>
    </class>
</hibernate-mapping>
=======================================================================================================================================================================
   
   

 5 Make a simple project in Maven using Hibernate to take the details about a Employee like EmpID,Name,Salary. Delete and Update the specific record.
 
 ANS. Records.java
 
      package Package1;

public class Records 

{
	
	private String ename;
	
	private int eid;
	
	private int salary;

	public String getEname() {
		return ename;
	}

	public void setEname(String ename) {
		this.ename = ename;
	}

	public int getEid() {
		return eid;
	}

	public void setEid(int eid) {
		this.eid = eid;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public Records(String ename, int eid, int salary) {
		super();
		this.ename = ename;
		this.eid = eid;
		this.salary = salary;
	}

	public Records() {
		super();
	}
}
===========================================================================================================
     Insert.java
     
     package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class Insert {

	public static void main(String[] args) 
	
	{
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
        Session s=sf.openSession();
		
		Transaction t=s.beginTransaction();
		
		Records r=new Records();
		
		r.setEname("ARJUN");
		
		r.setEid(24);
		
		r.setSalary(14000);
		
		s.saveOrUpdate(r);
		
		t.commit();
		s.close();
		sf.close();
		
		System.out.println("COMPLETED");
		
		
	}

}
==========================================================================================================
     RecordsUpdation.java
     
     package Package1;

import javax.persistence.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class RecordsUpdation {

	public static void main(String[] args)
	
	{
		
        SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		// Updating The Specific Record 
		//Query q=s.createQuery("update Records set ename='DHIRAJ' where ename='OM'");
		
		
		// Deleting The Specific Record
		Query q=s.createQuery("delete from Records where ename='DHIRAJ'");
		
		q.executeUpdate();
		
		s.getTransaction();
		
		s.close();
		 
		sf.close();
		
		System.out.println("RECORD UPDATED SUCCESSFULLY");
		
	}

}
===========================================================================================================
    hibernate.cfg.xml
    
    <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="Records.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
==========================================================================================================
   Records.hbm.xml
   
   <?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 23 Feb, 2021 6:28:35 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.Records" table="ASSIGNMENT5">
        <id name="eid" type="int">
            <column name="EID" />
            <generator class="assigned" />
        </id>
        <property name="ename" type="java.lang.String">
            <column name="ENAME" />
        </property>
        <property name="salary" type="int">
            <column name="SALARY" />
        </property>
    </class>
</hibernate-mapping>
======================================================================================================================================================================

7. Create 3 Bean classes named as SBI, IDBI, ICICI. In All classes the dependency is injected in the constructor.Dependency class is InterestRate which has one method
   getRate() which returns the rate of interest according to the bank. Display BankName, Bank Rate.
   
ANS.  SBI.java

      package Package1;

public class SBI implements Banks

{
	
	private GetRate gt;
	
	public SBI(GetRate gt) 
	{
		this.gt = gt;
	}

	@Override
	public String getName() 
	{
		return "NAME : SBI BANK";
	}

	@Override
	public int getRate() 
	{
		
		return gt.getRate();
	}
   
    
}
===================================================================================

     IDBI.java
     
     package Package1;

public class IDBI implements Banks

{
    private GetRate idbi;
    
    
	public IDBI(GetRate idbi) 
	{
		this.idbi = idbi;
	}

	@Override
	public String getName()
	{
		
		return "NAME : IDBI BANK";
	}

	@Override
	public int getRate() {
		
		return idbi.getRate();
	}

}
===============================================================================================

    ICICI.java
    
    package Package1;

public class ICICI implements Banks

{
	private GetRate icici;
	
	public ICICI(GetRate icici) 
	
	{
       this.icici = icici;
	}

	@Override
	public String getName() 
	{
		return "NAME : ICICI BANK";
	}

	@Override
	public int getRate() {
		
		return icici.getRate();
	}

}
========================================================================================

    GetRate_SBI.java
    
   package Package1;

public class GetRate2 implements GetRate

{

	@Override
	public int getRate() 
	
	{
		
		 return (7);
	}
	
	

}

======================================================================================

   GetRate_IDBI.java
   
   package Package1;

public class GetRate_IDBI implements GetRate

{

	@Override
	public int getRate() 
	{
		
		return (6);
	}
   
}
========================================================================

    GetRate_ICICI.java
    
    package Package1;

public class GetRate_icici implements GetRate

{

	@Override
	public int getRate() 
	
	{
		
		return (5);
	}

}
==================================================================================

    Banks.java (Interface)
    
    package Package1;

public interface Banks 

{
	 public String getName();    
	 
	 public int getRate();
}
=================================================================================

   GetRate.java (Interface)
   
   package Package1;

public interface GetRate 

{
    public int getRate();
}
=================================================================================

  application.Context.xml
  
  <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <bean id="myrate" class="Package1.GetRate_icici"></bean>
    
    <bean id="mybanks" class="Package1.ICICI">
    
    <constructor-arg ref="myrate"></constructor-arg>
    
    </bean>  
   
</beans>
========================================================================================================================================================================
   
   
    
    
     
