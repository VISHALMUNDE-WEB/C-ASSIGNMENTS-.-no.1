1. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Create a table maually.
   
ANS. student.java

package Package1;

public class student {

	private int rollno;
	private String name;
	private int age; 
	private int id;
	
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	
}
==========================================================================

student_test.java

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class student_test {

	public static void main(String[] args) {
		
     SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
	 Session s=sf.openSession();
		
	 Transaction t=s.beginTransaction();
		
	 student s1=new student();
	 
	 s1.setName("VISHAL");
	 
	 s1.setAge(19);
	 
	 s1.setRollno(21);
	 
     student s2=new student();
	 
	 s2.setName("SOHAM");
	 
	 s2.setAge(12);
	 
	 s2.setRollno(22);
	 
	 s.save(s1);
	 
	 s.save(s2);
	 
	 t.commit();
	 
	 s.close();
	 
	 sf.close();
	 
	System.out.println("DONE");
	
	}
		
}
======================================================================================

hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="student.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
=============================================================================================================

student.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 18 Feb, 2021 10:50:01 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.student" table="studentdetails">
        <id name="id" type="int">
            <column name="id" />
            <generator class="increment" />
        </id>
        <property name="rollno" type="int">
            <column name="rollno" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="name" />
        </property>
        <property name="age" type="int">
            <column name="age" />
        </property>
    </class>
</hibernate-mapping>
======================================================================================================================================================================

2. Create a class Student and make a mapping file to map this class. In Student class, Take studentRollno,name,age from user. Sno will be id by default. 
   Table should be created by hibernate and the records in the table should be updated.
   
ANS. student.java

package Package1;

public class student {

	private int rollno;
	private String name;
	private int age; 
	private int id;
	
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	
}
========================================================

studet_test.java

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class student_test {

	public static void main(String[] args) {
		
     SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
	 Session s=sf.openSession();
		
	 Transaction t=s.beginTransaction();
		
	 student s1=new student();
	 
	 s1.setName("VISHAL");
	 
	 s1.setAge(19);
	 
	 s1.setRollno(21);
	 
     student s2=new student();
	 
	 s2.setName("SOHAM");
	 
	 s2.setAge(12);
	 
	 s2.setRollno(22);
	 
	  student s3=new student();
		 
	  s3.setName("OM");
		 
	  s3.setAge(15);
		 
	  s3.setRollno(23);
	 
	 s.save(s1);
	 
	 s.save(s2);
	 
	 s.save(s3);
	 
	 t.commit();
	 
	 s.close();
	 
	 sf.close();
	 
	System.out.println("DONE");
	
	}
		
}
==============================================================================

student.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 18 Feb, 2021 11:16:04 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.student" table="ASSI2HB">
        <id name="id" type="int">
            <column name="ID" />
            <generator class="increment" />
        </id>
        <property name="rollno" type="int">
            <column name="ROLLNO" />
        </property>
        <property name="name" type="java.lang.String">
            <column name="NAME" />
        </property>
        <property name="age" type="int">
            <column name="AGE" />
        </property>
    </class>
</hibernate-mapping>
=======================================================================================

hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
      <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping  resource="student.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
=======================================================================================================================================================================

3. Make a class Account which has fields like accno,name & acctype. Acoount class will be Entity class. Take data from user and the table will be created automatically.

ANS. account.java

package Package1;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "accQ3")

public class account {
	
	 @Id
	 @GeneratedValue(strategy = GenerationType.SEQUENCE)
	 @Column(name = "Account_No")
	 private int accountno;
	
	 @Column(name = "Account_Name")
	 private String accountname;
	 
	 @Column(name = "Account_Type")
	 private String accounttype;

	public String getAccountname() {
		return accountname;
	}

	public void setAccountname(String accountname) {
		this.accountname = accountname;
	}

	public String getAccounttype() {
		return accounttype;
	}

	public void setAccounttype(String accounttype) {
		this.accounttype = accounttype;
	}

	public int getAccountno() {
		return accountno;
	}

	public void setAccountno(int accountno) {
		this.accountno = accountno;
	}
	
	
}
=====================================================================

account_test.java

package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class account_test {

	public static void main(String[] args) {
		
		SessionFactory sf=new Configuration().configure().addAnnotatedClass(account.class).buildSessionFactory();

		Session s=sf.openSession();
		
		s.beginTransaction();
		
		account a1=new account();
		
		a1.setAccountname("Ajay");
		
		a1.setAccounttype("Current");
		
		a1.setAccountno(454567);
		
		s.save(a1);
		
		//s.getTransaction().commit();
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
	
		System.out.println("COMPLETED");
		
	}

}
=======================================================================================

hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
    </session-factory>
</hibernate-configuration>
=======================================================================================================================================================================

4. Create a hibernate project in Maven which is a Dynamic web Project and Create a mapping file for the POJO class.Two JSP pages(A,B) will be created.First Jsp will 
   accepts username,Password and stores the deails in the logintable. In the same project Create another servlet which updates the password in the table. Create a 
   seperate JSP to update the password.Once the record is saved in table then second JSP page will display the message as "Record submitted".
   
ANS. Pojo.java

     package Package1;

public class Pojo 

{

	public int sno;
	
	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public String username;
	
	public String password;

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Pojo(String username, String password) {
		super();
		this.username = username;
		this.password = password;
	}

	public Pojo() {
		super();
	}
}	
=================================================================================

      Servlet1.java
      
      package Package1;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 * Servlet implementation class Servlet1
 */
public class Servlet1 extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Servlet1() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
		PrintWriter out = response.getWriter();
		
		String US = request.getParameter("US");
		
		String PW = request.getParameter("PW");
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Pojo p=new Pojo();
		
		p.setUsername(US);
		
		p.setPassword(PW);
		
		s.save(p);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
==========================================================================================================================================

        Servlet2.java
	
	package Package1;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 * Servlet implementation class Servlet2
 */
public class Servlet2 extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Servlet2() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
		PrintWriter out = response.getWriter();
		
		int sno = Integer.parseInt(request.getParameter("ID"));
		
		String PW = request.getParameter("PW");
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		Pojo p = s.get(Pojo.class,sno);
		
		p.setPassword(PW);
		
		s.update(p);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		System.out.println("PASSWORD SUCCESSFULLY UPDATED");
		
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
=====================================================================================================================================

     A.jsp
     
     <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="Servlet1">
USERNAME <input type="text" name="US"><br>
<br>
PASSWORD <input type="password" name="PW"><br>
<br>
<input type="submit" value="SUBMIT" >
</form>
</body>
</html>
=====================================================================================

   B.jsp
   
   <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="Servlet2">
ID <input type="text" name="ID"><br>
<br>
PASSWORD <input type="password" name="PW"><br>
<br>
<input type="submit" value="SUBMIT">
</form>
</body>
</html>
============================================================================================

  hibernate.cfg.xml
  
  <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="Pojo.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
===========================================================================================================

   Pojo.hbm.xml
   
   <?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 26 Feb, 2021 10:09:22 AM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.Pojo" table="POJO">
        <id name="sno" type="int">
            <column name="SNO" />
            <generator class="assigned" />
        </id>
        <property name="username" type="java.lang.String">
            <column name="USERNAME" />
        </property>
        <property name="password" type="java.lang.String">
            <column name="PASSWORD" />
        </property>
    </class>
</hibernate-mapping>
=======================================================================================================================================================================
   
   

 5 Make a simple project in Maven using Hibernate to take the details about a Employee like EmpID,Name,Salary. Delete and Update the specific record.
 
 ANS. Records.java
 
      package Package1;

public class Records 

{
	
	private String ename;
	
	private int eid;
	
	private int salary;

	public String getEname() {
		return ename;
	}

	public void setEname(String ename) {
		this.ename = ename;
	}

	public int getEid() {
		return eid;
	}

	public void setEid(int eid) {
		this.eid = eid;
	}

	public int getSalary() {
		return salary;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public Records(String ename, int eid, int salary) {
		super();
		this.ename = ename;
		this.eid = eid;
		this.salary = salary;
	}

	public Records() {
		super();
	}
}
===========================================================================================================
     Insert.java
     
     package Package1;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

public class Insert {

	public static void main(String[] args) 
	
	{
		
		SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
        Session s=sf.openSession();
		
		Transaction t=s.beginTransaction();
		
		Records r=new Records();
		
		r.setEname("ARJUN");
		
		r.setEid(24);
		
		r.setSalary(14000);
		
		s.saveOrUpdate(r);
		
		t.commit();
		s.close();
		sf.close();
		
		System.out.println("COMPLETED");
		
		
	}

}
==========================================================================================================
     RecordsUpdation.java
     
     package Package1;

import javax.persistence.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class RecordsUpdation {

	public static void main(String[] args)
	
	{
		
        SessionFactory sf=new Configuration().configure().buildSessionFactory();
		
		Session s=sf.openSession();
		
		s.beginTransaction();
		
		// Updating The Specific Record 
		//Query q=s.createQuery("update Records set ename='DHIRAJ' where ename='OM'");
		
		
		// Deleting The Specific Record
		Query q=s.createQuery("delete from Records where ename='DHIRAJ'");
		
		q.executeUpdate();
		
		s.getTransaction();
		
		s.close();
		 
		sf.close();
		
		System.out.println("RECORD UPDATED SUCCESSFULLY");
		
	}

}
===========================================================================================================
    hibernate.cfg.xml
    
    <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
    <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
        <mapping resource="Records.hbm.xml"/>
    </session-factory>
</hibernate-configuration>
==========================================================================================================
   Records.hbm.xml
   
   <?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 23 Feb, 2021 6:28:35 PM by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
    <class name="Package1.Records" table="ASSIGNMENT5">
        <id name="eid" type="int">
            <column name="EID" />
            <generator class="assigned" />
        </id>
        <property name="ename" type="java.lang.String">
            <column name="ENAME" />
        </property>
        <property name="salary" type="int">
            <column name="SALARY" />
        </property>
    </class>
</hibernate-mapping>
======================================================================================================================================================================

6. Create a Maven project in hibernate to perform CRUD Operations. Create a web Application.

ANS. Pro1.java

     package Package1;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table

public class Pro1 

{


	@Id
	@GeneratedValue(strategy = GenerationType.TABLE)
	
	public int sno;
	
	public int id;
	
	public String name;

	public int getSno() {
		return sno;
	}

	public void setSno(int sno) {
		this.sno = sno;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
}
===========================================================================

    Create.jsp
    
    <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="Create">
ID <input type="number" name="id"><br>
<br>
NAME <input type="text" name="nm"><br>
<br>
<input type="submit" value="SUBMIT" >
</form>
</body>
</html>
==================================================================================

   Create.java (Servlet)
   
   package Package1;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
/**
 * Servlet implementation class Create
 */
public class Create extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Create() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
        int num = Integer.parseInt(request.getParameter("id"));
		
		String nm = request.getParameter("nm");
		
		PrintWriter out = response.getWriter();
		
		 SessionFactory sf= new Configuration().configure().addAnnotatedClass(Pro1.class).buildSessionFactory();
		
		 Session s = sf.openSession();
		
		 s.beginTransaction();
		 
		 Pro1 p1=new Pro1();
		 
		 p1.setId(num);
		 
		 p1.setName(nm);
		 
		 s.save(p1);
			
	     s.getTransaction().commit();
			
		 s.close();
			
		 sf.close();
			
		System.out.print("RECORD INSERTED SUCCESFULLY");
		
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
====================================================================================================================================

     Read.jsp
     
     <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="Read" >
SNO RECORDS <input type="int"  name="sno"><br>
<br>
<input type="submit" value="ENTER">
</form>
</body>
</html>
=================================================================================

    Read.java (Servlet)
    
    package Package1;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 * Servlet implementation class Read
 */
public class Read extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Read() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
        int sno = Integer.parseInt(request.getParameter("sno"));
		
		PrintWriter out = response.getWriter();
		
		SessionFactory sf = new Configuration().configure().addAnnotatedClass(Pro1.class).buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Pro1 sp = s.get(Pro1.class, sno);
		
		out.print("SPORT NUMBER : "+sp.getId()+"   "+"SPORT NAME : "+sp.getName());
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();	
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
====================================================================================================================================

    Update.jsp
    
    <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="Update">
SNO RECORD <input type="text" name="upd">
<INPUT TYPE="SUBMIT" VALUE="ENTER">
</form>
</body>
</html>
=================================================================================

   Update.java (Servlet)
   
   package Package1;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 * Servlet implementation class Update
 */
public class Update extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Update() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
		int sno = Integer.parseInt(request.getParameter("upd"));
		
		PrintWriter out = response.getWriter();
		
		SessionFactory sf = new Configuration().configure().addAnnotatedClass(Pro1.class).buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Pro1 sp = s.get(Pro1.class, sno);
		
		sp.setName("VISHAL");
		
		s.update(sp);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
===================================================================================================================================

     Delete.jsp
     
     <% page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form action="Delete">
ID RECORD <input type="text" name="del">
<input type="submit" value="ENTER">
</form>
</body>
</html>
=================================================================================

   Delete.java (Servlet)
   
   package Package1;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 * Servlet implementation class Delete
 */
public class Delete extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Delete() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
        int sno = Integer.parseInt(request.getParameter("del"));
		
		PrintWriter out = response.getWriter();
		
		SessionFactory sf = new Configuration().configure().addAnnotatedClass(Pro1.class).buildSessionFactory();
		
		Session s = sf.openSession();
		
		s.beginTransaction();
		
		Pro1 sp = new Pro1();
		
	    sp.setSno(sno);
		
		s.delete(sp);
		
		s.getTransaction().commit();
		
		s.close();
		
		sf.close();
		
		
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
====================================================================================================================================

    hibernate.cfg.xml
    
    <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="hibernate.connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
        <property name="hibernate.connection.password">jyotimunde</property>
        <property name="hibernate.connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>
        <property name="hibernate.connection.username">system</property>
        <property name="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</property>
         <property name="show_sql" >true</property>
    </session-factory>
</hibernate-configuration>
========================================================================================================================================================================

7. Create 3 Bean classes named as SBI, IDBI, ICICI. In All classes the dependency is injected in the constructor.Dependency class is InterestRate which has one method
   getRate() which returns the rate of interest according to the bank. Display BankName, Bank Rate.
   
ANS.  SBI.java

      package Package1;

public class SBI implements Banks

{
	
	private GetRate gt;
	
	public SBI(GetRate gt) 
	{
		this.gt = gt;
	}

	@Override
	public String getName() 
	{
		return "NAME : SBI BANK";
	}

	@Override
	public int getRate() 
	{
		
		return gt.getRate();
	}
   
    
}
===================================================================================

     IDBI.java
     
     package Package1;

public class IDBI implements Banks

{
    private GetRate idbi;
    
    
	public IDBI(GetRate idbi) 
	{
		this.idbi = idbi;
	}

	@Override
	public String getName()
	{
		
		return "NAME : IDBI BANK";
	}

	@Override
	public int getRate() {
		
		return idbi.getRate();
	}

}
===============================================================================================

    ICICI.java
    
    package Package1;

public class ICICI implements Banks

{
	private GetRate icici;
	
	public ICICI(GetRate icici) 
	
	{
       this.icici = icici;
	}

	@Override
	public String getName() 
	{
		return "NAME : ICICI BANK";
	}

	@Override
	public int getRate() {
		
		return icici.getRate();
	}

}
========================================================================================

    GetRate_SBI.java
    
   package Package1;

public class GetRate2 implements GetRate

{

	@Override
	public int getRate() 
	
	{
		
		 return (7);
	}
	
	

}

======================================================================================

   GetRate_IDBI.java
   
   package Package1;

public class GetRate_IDBI implements GetRate

{

	@Override
	public int getRate() 
	{
		
		return (6);
	}
   
}
========================================================================

    GetRate_ICICI.java
    
    package Package1;

public class GetRate_icici implements GetRate

{

	@Override
	public int getRate() 
	
	{
		
		return (5);
	}

}
==================================================================================

    Banks.java (Interface)
    
    package Package1;

public interface Banks 

{
	 public String getName();    
	 
	 public int getRate();
}
=================================================================================

   GetRate.java (Interface)
   
   package Package1;

public interface GetRate 

{
    public int getRate();
}
=================================================================================

  application.Context.xml
  
  <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <bean id="myrate" class="Package1.GetRate_icici"></bean>
    
    <bean id="mybanks" class="Package1.ICICI">
    
    <constructor-arg ref="myrate"></constructor-arg>
    
    </bean>  
   
</beans>
========================================================================================================================================================================

8. Create two bean classes as Student & Product. Make spring configuration file where configure the setter injection for the method which is saving the entered records 
   for the student as rollno,name,percentage in the database and do the same for products.
   
ANS.  Student.java

      package Package1;

public class Student 
{

	public int rollno;
	
	public String name;
	
	public double percentage;
	
	public String i1;

	public Student(String i1) 
	
	{
		
		this.i1 = i1;
	}

	public int getRollno() {
		return rollno;
	}

	public void setRollno(int rollno) {
		this.rollno = rollno;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getPercentage() {
		return percentage;
	}

	public void setPercentage(double percentage) {
		this.percentage = percentage;
	}
	
	public String mymethod()
	
	{
		return i1.rec();
	}
	
}
================================================================================

     Student1.java
     
     package Package1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class Student1 implements Details

{

	@Override
	public String rec() 
	
	{
		
        Scanner sc = new Scanner(System.in);
		
		try 
		
		{
			
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection cn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","jyotimunde");
		
		PreparedStatement pmt = cn.prepareStatement("insert into ASSI8 values(?,?,?)");
		
		System.out.println("ENTER ROLLNO OF THE STUDENT : ");
		int roll = sc.nextInt();
		
		sc.nextLine();
		
		pmt.setInt(1,roll );
		
		System.out.println("ENTER NAME OF THE STUDENT : ");
		String name= sc.nextLine();
		
		pmt.setString(2,name );
		
		System.out.println("ENTER PERCENTAGE OF THE STUDENT : ");
		double per = sc.nextDouble();
		
		pmt.setDouble(3,per);
		
		pmt.execute();
		
		pmt.close();
		
		cn.close();
		}
		catch(Exception ea)
		{
			ea.printStackTrace();
		}
		
		return "RECORD INSERTED SUCCESSFULLY";
	}
	

	}
==============================================================================================

     Product.java
     
     package Package1;

public class Product 

{

	public int pid;
	
	public String name;
	
	public int price;
	
	public String i2;

	public Product(String i2) 
	
	{
		this.i2 = i2;
	}

	public int getPid() {
		return pid;
	}

	public void setPid(int pid) {
		this.pid = pid;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}
	
	public String mymethod2()
	{
		return i2.rec();
	}
	
}
========================================================================================

     Product1.java
     
     package Package1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class Product1 implements Details

{

	@Override
	public String rec() 
	
	{
		
        Scanner sc = new Scanner(System.in);
		
		try {
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		Connection cn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","jyotimunde");
		
		PreparedStatement pmt = cn.prepareStatement("insert into ASSI_8 values(?,?,?)");
		
		System.out.println("ENTER ID OF THE PRODUCT : ");
		int pid = sc.nextInt();
		
		sc.nextLine();
		
		pmt.setInt(1,pid );
		
		System.out.println("ENTER PRODUCT NAME : ");
		String nm= sc.nextLine();
		
		pmt.setString(2,nm );
		
		System.out.println("ENTER PRODUCT PRICE : ");
		int per = sc.nextInt();
		
		pmt.setDouble(3,per);
		
		pmt.execute();
		
		pmt.close();
		
		cn.close();
		}
		catch(Exception ea)
		{
			ea.printStackTrace();
		}
		
		return "RECORD INSERTED SUCCESSFULLY";
	}
	
	}
=====================================================================================================

      Details.java (Interface)
      
      package Package1;

public interface Details 

{

	public String rec();
	
}
=======================================

    TestMain.java
    
    package Package1;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestMain {

	public static void main(String[] args) 
	
	{
	
		    ClassP con = new ClassPathXmlApplicationContext("applicationContext.xml");
		    
		    Student s1 = con.getBean("s",Student.class);
		    
		    System.out.println(s1.mymethod());
		    
		    Product p1 = con.getBean("p",Product.class);
		    
		    System.out.println(p1.mymethod1());

			}

	}
========================================================================================================

     applicationContext.xml
     
     <?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="st" class="Student2" />
    
    <bean id="pr" class="Product2" />
    
    <bean id="s" class="Student" >
    <property name="i1" ref="st" />
    </bean>
    
    <bean id="p" class="Product">
    <property name="i2" ref="pr" />
    </bean>

</beans>
========================================================================================================================================================================

9. Write a spring configuration file which injects the username, email and password to the Bean class User.

ANS. file1.java

     package Package1;

public class file1 

{
	
	public String username;
	
	public String email;
	
	public int password;
	
	public int i1;
	
	public int getI1() {
		return i1;
	}

	public void setI1(int i1) {
		this.i1 = i1;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public int getPassword() {
		return password;
	}

	public void setPassword(int password) {
		this.password = password;
	}

	public file1(String username, String email, int password) {
		super();
		this.username = username;
		this.email = email;
		this.password = password;
	}

	public file1() {
		super();
	}
	
	public String v1()
	
	{
	
		return i1.status();
		
	}
}
=======================================================================================================

   Store.java
   
   package Package1;

public class Store implements Interface

{

	@Override
	public String status() 
	
	{
		
		return "COMPLETED";
	}
	
	@Override
	public String getusername() 
	
	{
		
		return "VISHAL";
	}
	
	@Override
	public String getemail() 
	
	{
		
		return "VishalMunde@Gmail.com";
	}
	
	@Override
	public String getpassword() 
	
	{
		
		return "VISHAL123";
	}
}
=============================================================================================

    Interface.java
    
    package Package1;

public interface Interface 

{

	public String getusername;
	
	public String getemail;
	
	public int getpassword;
	
	public String status();
	
}
===================================================

    Test.java
    
    package Package1;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestFile {

	public static void main(String[] args) 
	
	{
		
		ClassPathXmlApplicationContext cs = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		file1 f1 = cs.getBean("f",file1.class);
		
		System.out.println(f1.getUsername());
		
		System.out.println(f1.getEmail());
		
		System.out.println(f1.getPassword());
		
		System.out.println(f1.status());
		
		cs.close();

		}
	
	}
========================================================================================================================================================================

10. Write the configuration for 2 bean objects in the Spring Configuration file & Retrieve all the bean objects in the testApp using XmlBeanFactory.

ANS.  C1.java

      package Package1;

public class C1 

{

	public String v1;

	public String getV1() 
	{
		return v1;
	}

	public void setV1(String v1) 
	{
		this.v1 = v1;
	}
	
	public void getmsg()
	{
		v1.getmsg();
	}
	
}
===============================================================================================

     C2.java
     
     package Package1;

public class C2 

{

	public String v2;

	public String getV2() 
	{
		return v2;
	}

	public void setV2(String v2)
	{
		this.v2 = v2;
	}
	
	public void getmsg()
	{
		v2.getmsg();
	}
	
}
============================================================================================

    Class1.java
    
    package Package1;

public class Class1 implements Interface

{

	@Override
	public void getmsg() 
	
	{
		
		System.out.println("COMPLETED");
		
	}

	
	
}
===================================================================

    TestMain.java
    
    package Package1;

import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.core.io.ClassPathResource;

public class TestMain {

	public static void main(String[] args) 
	
	{
		
		XmlBeanFactory bf = new XmlBeanFactory(new ClassPathResource("ApplicationContext.xml"));
		
		C1 c1 = bf.getBean("C1",C1.class);
		
		c1.getmsg();
		
		C2 c2 = bf.getBean("C2",C2.class);
		
		c2.getmsg();
		
		System.out.println(c1);
		
		System.out.println(c2);

		

	}

}
================================================================================================

    Interface.java
    
    package Package1;

public interface Interface 

{

	public void getmsg();
	
}
=========================================================

    ApplicationContext.xml
    
    <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="class" class="Class1"  />
    
    <bean id="bean1" class="C1" >
    <property name="v1" ref="class" />
    </bean>
    
    <bean id="bean2" class ="C2" >
    <property name="v2" ref="class" />
    </bean>
========================================================================================================================================================================

11. Make a Bean class which has a method which accepts firstname & lastname as parameters and returns the Fullname. Inject this bean class object into a Class Person
    Print the Details of a person as Fullname & age.
    
ANS. Pro1.java

     package Package1;

import java.util.Scanner;

public class Pro1 

{

	public String FirstName;
	
	public String LastName;
	
	Scanner sc;

	public String getFirstName() {
		return FirstName;
	}

	public void setFirstName(String firstName) {
		sc = new Scanner(System.in);
		System.out.println("ENTER FIRST NAME : ");
		String fm = sc.nextLine();
		this.FirstName = fm;
	}

	public String getLastName() {
		return LastName;
	}

	public void setLastName(String lastName) {
		sc = new Scanner(System.in);
		System.out.println("ENTER LAST NAME : ");
		String lm = sc.nextLine();
		this.LastName = lm;
	}
	
	
	
}
=================================================================================

    Class1.java
    
    package Package1;

public class Class1 

{

	public int age;

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}
	
	FullName fn;
	
	public FullName getFn() {
		return fn;
	}

	public void setFn(FullName fn) {
		this.fn = fn;
	}

	public void setnames()
	{
		fn.setFnm();
		fn.setLnm();
	}
	
	public String getfname()
	{
		return fn.getFnm();
	}
	
	public String getlname()
	{
		return fn.getLnm();
	}
	
	
}
======================================================================================

    TestMain.java
    
    package Package1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestMain {

	public static void main(String[] args) 
	
	{
	
		ApplicationContext ac = new ClassPathXmlApplicationContext("appcontext_ASS11.xml");
		
		Pro1 p = ac.getBean("p1",Pro1.class);
		
		p.setAge(18);
		
		System.out.println(p1.getAge());
		
		p.setnames();
		
		System.out.println("PERSON NAME : "+p.getfname()+" "+p.getlname());
		
	}

}
=============================================================================================================

    ApplicationContext.xml
    
    <?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <bean id="i2" class="Class1" >
    </bean>
    
    <bean id="i1" class="Pro1" >
    <property name="fn"  ref="i2"></property>
    </bean>
========================================================================================================================================================================

12. Create a spring Project in Maven. Make two bean classes (Annotated) ,In First Bean define a method which is displaying some message .Apply the Injection on this method.
     In second bean Apply the Constructor injection and a method in the bean is displaying fibbonacci series in it.
     
ANS.  Bean1.java

      package Package1;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@component("1")
public class Bean1 implements Interface

{

	public String vm;
	
	@Autowired
	public Bean1(String vm)
	{
		this.vm = i;
	}
	public String getmsg() 
	{
		
		return vm.getmsg();
		
	}

	
	
}
============================================================================================================

     Bean2.java
     
     package Package1;

import org.springframework.stereotype.Component;

@Component
public class Bean2 implements Interface

{

	public String getmsg() 
	
	{
		
		return "COMPLETED";
		
	}

	
	
}
=======================================================================================================================

     Interface.java
     
     package Package1;

public interface Interface 

{

	public String getmsg();
	
}
======================================================================================================================

   Interface1.java
   
   package Package1;

public interface Interface2 

{

	public void getFibonic();
	
}
=======================================================================================================================

    Bean_2.java
    
    package Package1;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component("2")
public class Bean_2 implements Interface2

{

	public String i2;
	
	
	  @Autowired
	   public 2(Interface2 i)
	   
	   {
		  
		  this.i2 = i;
		  
	   }

    
	public Interface2 getI2() {
		return i2;
	}


	public void setI(Interface2 i2) {
		this.i = i;
	}


	public void getFibonic() 
	
	{
	
		i2.getfibonic();
		
	}	
}
=====================================================================================================================

     TestMain.java
     
     package Package1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestMain {

	public static void main(String[] args) 
	
	{
		

		ApplicationContext sc = new ClassPathXmlApplicationContext("ApplicationContext.xml");
		
		Bean1 b1 = sc.getBean("Bean1",Interface.class);
		
		System.out.println(b1.getmesg());

		Bean2 b2 = b2.getBean("Bean2",Interface1.class);
		
		b2.displayfibonacci();
		}
		
	}

}
===============================================================================================================================

    Fibonic.java
    
    package Package1;

import org.springframework.stereotype.Component;

@Component
public class Fibonic 

{

	int max = 10, prev= 0, next = 1;
	
    System.out.print("Fibonacci Series of "+max+" numbers:");

    int i=1;
    
    while(i <= max)
    {
        System.out.print(prev+" ");
        int sum = prev + next;
        prev = next;
        next = sum;
        i++;
    }
	
}
=====================================================================================================

    ApplicationContext.xml
    
    <?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    <context:component-scan base-package="Package1"></context:component-scan>
</beans>
========================================================================================================================================================================

17  Create a Spring MVC form where two fields have to be taken as Username & Passord. Username & password can not be null & Password must be 8 characters long. If 
    Username is "admin" and password is "abcd" then a success.jsp should display the Message as "Welcome admin". If any errors are there in the fields then show the errors
    on the same page for the text fields.
    
ANS.  Assi17.java

      package Package1;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

public class Assi17 

{

	public String username;
	
	@NotNull(message = "Password Is Required")
	@Pattern(regexp = "^[a-zA-Z0-9]{8}",message = "MAX 8 DIGITS ALLOWED")
	public String password;

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Assi17() {
		super();
	}
}
====================================================================================================

     Assi17Controller.java
     
     package Package1;

import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/assi17")
public class Assi17Controller 
{

	@RequestMapping("/Assign17")
	public String Assignment17(Model m)
	
	{
		Assi17 a7=new Assi17();
		m.addAttribute("Assi17",a7);
		return "Assi17form";
	}
	
	@RequestMapping("/processform")
	public String processform(@Valid @ModelAttribute("Assi17") Assi17 a7,BindingResult b)
	
	{
		if(a7.username.equals("admin") && a7.password.equals("abcdefgh"))
			
		{
			return "Assi17Success";
		}
		
		else
		{
			return "Assi17Failed";
		}
	}
	
}
=====================================================================================================================

    Assi17.jsp
    
    <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>     
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form:form action="processform" modelAttribute="Assi17">
Username <form:input path="username"/><br>
Password <form:input path="password"/>
<input type="submit" value="SUBMIT">
</form:form>
</body>
</html>
=====================================================================================================================

    Assi17Success.jsp
    
    <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h1>WELCOME ADMIN</h1>
</body>
</html>
======================================================================================================================

   Assi17Failed.jsp
   
   <%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h1>LOGIN FAILED USERNAME OR PASSWORS IS INCORRECT</h1>
</body>
</html>
========================================================================================================================================================================




	
	

   
   
    
    
     
